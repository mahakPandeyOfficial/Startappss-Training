üî∑ What is Express JS?

    Express JS is a minimal and flexible NODE JS web application framework that provides a list of features for building web and mobile application easily. 

            - It simplifies the process of creating a server.

            - Works on top of Node.js's native HTTP module.

            - Follows middleware architecture for handling requests and responses.

 üî∑ Need of Express JS?
       
       1. Express JS Simplify Server Creation: Helps in quickly setting up and running a web server without the need for complex coding.
       2. Routing Management: Provides a powerful routing mechnaism  to handle URLs and HTTP methods effectivly.
       3. Middleware Support : Allows the use of Middleware to handel request and response as well as middleware operations.
       4. API develpoment: Facilitates easy and effecient creation of RESTfull Api.
       5. Community and Plugins: It has a vast and large ecosystem with numerous plugins and extentions.


üî∑ Compare Node JS vs Express JS for creating Server:

        | Feature              | Node.js Only                   | Express.js                                    |
        | -------------------- | ------------------------------ | --------------------------------------------- |
        | Routing              | Manual using `if/else`         | Easy using `app.get()`, `app.post()`          |
        | Response Handling    | `res.writeHead()`, `res.end()` | `res.send()`, `res.json()`                    |
        | Middleware           | Not built-in                   | Yes, very easy with `app.use()`               |
        | Request Body Parsing | Manual (needs extra code)      | Built-in via `express.json()`, `urlencoded()` |
        | Code Length          | More lines                     | Short and clean                               |
        | Readability          | Less readable for beginners    | Beginner-friendly                             |


üî∑ Different Syntax for Node JS and Express Js used for creating Server:

      Node JS => 
               const http = require("http");

               const server = http.createServer((req, res) => {

                if(req.url === "/" && req.method === "GET") {
                    res.writeHead(200, { "Content-Type" : "text/plain" });
                    res.end("HEllO from Node.js");
                }else{
                    res.writeHead(404, { 'Content-Type' : 'text/plain'});
                    res.end('Page not Found');
                }
               });

               server.listen(3000, () => {
                console.log("Server running at http://localhost:3000")
               });

               ‚ùó Problems with Node.js Only:
                    Routing is manual (you have to write if/else for every URL).

                    No middleware (e.g. logging, auth, body parsing).

                    Response headers and status codes have to be written manually.

                    No built-in request body parsing.


     Express JS => 

                const express = require('express');
                const app = express();

                app.get('/', (req, res) =>  {
                    res.send('Hello from Express");
                })        

                app.listen(3000, ()=> {
                    console.log('Server is running at http://localhost:3000');
                });

        ‚úÖ Benefits with Express:
            Built-in routing system: app.get(), app.post(), etc.

            Built-in middleware system: easy to add logging, parsing, auth.

            Response sending is simpler: res.send(), res.json().

            Easily handles query params, path params, etc.

            Easy to connect with databases, template engines, and static files.        


üî∑ Installation of Express JS?

                    cmd:  npm install express --save


    Flow Diagram : 
                   
                   üîª Request from client
                            |
                            v
                [ Middleware 1 ] ‚Üí logs, auth, parse body
                            |
                            v
                [ Middleware 2 ] ‚Üí check token, etc.
                            |
                            v
                [ Route Handler ] ‚Üí app.get('/user', ...)
                            |
                            v
                     [ Send Response ]
                            |
                            v
                üî∫ Response to client

üî∑ Adding Middleware: 
            
            üß© What is Middleware in Express.js?
                    In Express.js, middleware is a function that executes during the request-response cycle.
                    Order is VERY IMPORTANT in MIDDLEWARE. It sits between the incoming request and the final response, and it can:

                           - Access and modify the request (req)

                           - Access and modify the response (res)

                           - End the response cycle

                           - Call the next middleware using next()

                            { Request ko aage bhejna hai ya nahi (next() bolke)
                              Request/response mein kuch badlav karna hai ya nahi
                              Ya seedha response bhejna hai (aur request wahi pe khatam kar dena hai)}
            
            EXAMPLE: Sochiye ek customer (browser) aapki dukaan (server) pe aaya hai.
                     Middleware waisa staff hai jo customer ke andar aane se pehle:

                        1. Uski entry register karta hai (logging)

                        2. Check karta hai mask pehna hai ya nahi (authentication)

                        3. Uska bag check karta hai (security)

                        4. Phir usse andar jane deta hai ya mana kar deta hai

 üî∑  TYPES OF MIDDLEWARE IN EXPRESS:
                | Type                  | Description                                                 |
                | --------------------- | ----------------------------------------------------------- |
                | Application-level     | Use globally via `app.use()` or per-route                   |
                | **Router-level**      | Similar to app-level, but attached to `express.Router()`    |
                | **Built-in**          | Like `express.json()`, `express.static()`                   |
                | **Third-party**       | Like `morgan`, `cors`, `body-parser`                        |
                | **Error-handling**    | Special middleware to handle errors `(err, req, res, next)` |

üî∑ SYNTAX: 
          app.use((req, res, next) => {
           ..........
            next(); // go to next middleware or route , 
                    //If this is not goes to next until then it will wait for this middleware  to wait for responsing and then moving to next middleware.
        }); 

        NOTES: 
        ---------------------------------------------------------------------------------------
        | 1. Order matters in Expresswhile handling middleware.                                |
        | 2. If you want to use middleware for all routes, use app.use() method                |
        | 3. Can not call next() after send(), as in express send means end of the response.   |
        | 4. Calling res.send() implicitly calls res.end().                                    |
        ---------------------------------------------------------------------------------------
        
üî∑ Handling Routes in Express JS?

            Kisi specific URL pe jab koi request aaye (GET, POST, etc.), toh uske liye kya kaam hona chahiye ‚Äî ye batana.
             
             BASIC ROUTE SYNTAX: app.METHOD(PATH, HANDLER)
 
            | Part      | Example            | Meaning                       |
            | --------- | ------------------ | ----------------------------- |
            | `METHOD`  | `get`, `post`      | HTTP method (GET, POST, etc.) |
            | `PATH`    | `'/'`, `'/about'`  | URL path                      |
            | `HANDLER` | `(req, res) => {}` | Function to run when matched  |


 Basic GET Method Syntax example:               const express = require('express');
                                                const app = express();

                                                app.get('/', (req, res) => {
                                                res.send('üè† Welcome to Home Page');
                                                });

                                                app.get('/about', (req, res) => {
                                                res.send('‚ÑπÔ∏è About Page');
                                                });

                                                app.listen(3000, () => console.log('Server running on http://localhost:3000'));



### Modules :

   1. body-parser : cmd => npm i body-parser
                   
                   body-parser is a middleware that was used in Express.js to:

                  üîç Parse the body of incoming HTTP requests, especially for POST, PUT, or PATCH methods ‚Äî where data is sent by the client.  (jese tumne data bheja form me ab usko display karna hai ya use karna h tumhare module me to usme use hota hai.)
                
                 It helps you access form or JSON data sent by the client like by :
                  syntax : req.body


          What it do??
        So in start the data we get is raw by default
        body parser converts this data into JSON format 
        so we can easily access it using req.body.

        {
            "name": "Mahak",
            "age": 22
        }  

        when we access name by req.body.name , it will simply give "Mahak" not full raw formed data.

    2. path :
                path Node.js ka built-in (andar se diya hua) module hai
                jo aapko file aur folder ke paths ke saath kaam karne me help karta hai.

                Step 1. Import the module-> 
                    ```
                       const path = require('path'); // CommonJS
                        // OR (agar ES module use kar rahe ho)
                        import path from 'path';  
                    ```
            IMPORTANT path module METHODS:

                 1. `path.join()     : Parts jodna (safe tarike se)
                      ```
                            const filePath = path.join('folder', 'images', 'photo.jpg');
                            console.log(filePath); 
                      ```     
                 2Ô∏è. path.resolve() ‚Äì Complete (absolute) path banana. Current working directory se     complete path banata hai.
                      ```
                            const result = path.resolve('folder', 'file.txt');
                            console.log(result);      
                      ```  
                 3.  path.basename() ‚Äì Sirf file ka naam nikalna
                      ```
                            const fullPath = '/user/mahak/notes.txt';

                            console.log(path.basename(fullPath));       
                            // output: notes.txt

                            console.log(path.basename(fullPath, '.txt')); 
                            // output: notes 
                      ```              