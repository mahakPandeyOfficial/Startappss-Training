🔷 What is Express JS?

    Express JS is a minimal and flexible NODE JS web application framework that provides a list of features for building web and mobile application easily. 

            - It simplifies the process of creating a server.

            - Works on top of Node.js's native HTTP module.

            - Follows middleware architecture for handling requests and responses.

 🔷 Need of Express JS?
       
       1. Express JS Simplify Server Creation: Helps in quickly setting up and running a web server without the need for complex coding.
       2. Routing Management: Provides a powerful routing mechnaism  to handle URLs and HTTP methods effectivly.
       3. Middleware Support : Allows the use of Middleware to handel request and response as well as middleware operations.
       4. API develpoment: Facilitates easy and effecient creation of RESTfull Api.
       5. Community and Plugins: It has a vast and large ecosystem with numerous plugins and extentions.


🔷 Compare Node JS vs Express JS for creating Server:

        | Feature              | Node.js Only                   | Express.js                                    |
        | -------------------- | ------------------------------ | --------------------------------------------- |
        | Routing              | Manual using `if/else`         | Easy using `app.get()`, `app.post()`          |
        | Response Handling    | `res.writeHead()`, `res.end()` | `res.send()`, `res.json()`                    |
        | Middleware           | Not built-in                   | Yes, very easy with `app.use()`               |
        | Request Body Parsing | Manual (needs extra code)      | Built-in via `express.json()`, `urlencoded()` |
        | Code Length          | More lines                     | Short and clean                               |
        | Readability          | Less readable for beginners    | Beginner-friendly                             |


🔷 Different Syntax for Node JS and Express Js used for creating Server:

      Node JS => 
               const http = require("http");

               const server = http.createServer((req, res) => {

                if(req.url === "/" && req.method === "GET") {
                    res.writeHead(200, { "Content-Type" : "text/plain" });
                    res.end("HEllO from Node.js");
                }else{
                    res.writeHead(404, { 'Content-Type' : 'text/plain'});
                    res.end('Page not Found');
                }
               });

               server.listen(3000, () => {
                console.log("Server running at http://localhost:3000")
               });

               ❗ Problems with Node.js Only:
                    Routing is manual (you have to write if/else for every URL).

                    No middleware (e.g. logging, auth, body parsing).

                    Response headers and status codes have to be written manually.

                    No built-in request body parsing.


     Express JS => 

                const express = require('express');
                const app = express();

                app.get('/', (req, res) =>  {
                    res.send('Hello from Express");
                })        

                app.listen(3000, ()=> {
                    console.log('Server is running at http://localhost:3000');
                });

        ✅ Benefits with Express:
            Built-in routing system: app.get(), app.post(), etc.

            Built-in middleware system: easy to add logging, parsing, auth.

            Response sending is simpler: res.send(), res.json().

            Easily handles query params, path params, etc.

            Easy to connect with databases, template engines, and static files.        


🔷 Installation of Express JS?

                    cmd:  npm install express --save


    Flow Diagram : 
                   
                   🔻 Request from client
                            |
                            v
                [ Middleware 1 ] → logs, auth, parse body
                            |
                            v
                [ Middleware 2 ] → check token, etc.
                            |
                            v
                [ Route Handler ] → app.get('/user', ...)
                            |
                            v
                     [ Send Response ]
                            |
                            v
                🔺 Response to client

🔷 Adding Middleware: 
            
            🧩 What is Middleware in Express.js?
                    In Express.js, middleware is a function that executes during the request-response cycle.
                    Order is VERY IMPORTANT in MIDDLEWARE. It sits between the incoming request and the final response, and it can:

                           - Access and modify the request (req)

                           - Access and modify the response (res)

                           - End the response cycle

                           - Call the next middleware using next()

                            { Request ko aage bhejna hai ya nahi (next() bolke)
                              Request/response mein kuch badlav karna hai ya nahi
                              Ya seedha response bhejna hai (aur request wahi pe khatam kar dena hai)}
            
            EXAMPLE: Sochiye ek customer (browser) aapki dukaan (server) pe aaya hai.
                     Middleware waisa staff hai jo customer ke andar aane se pehle:

                        1. Uski entry register karta hai (logging)

                        2. Check karta hai mask pehna hai ya nahi (authentication)

                        3. Uska bag check karta hai (security)

                        4. Phir usse andar jane deta hai ya mana kar deta hai

 🔷  TYPES OF MIDDLEWARE IN EXPRESS:
                | Type                  | Description                                                 |
                | --------------------- | ----------------------------------------------------------- |
                | Application-level     | Use globally via `app.use()` or per-route                   |
                | **Router-level**      | Similar to app-level, but attached to `express.Router()`    |
                | **Built-in**          | Like `express.json()`, `express.static()`                   |
                | **Third-party**       | Like `morgan`, `cors`, `body-parser`                        |
                | **Error-handling**    | Special middleware to handle errors `(err, req, res, next)` |

🔷 SYNTAX: 
          app.use((req, res, next) => {
           ..........
            next(); // go to next middleware or route , 
                    //If this is not goes to next until then it will wait for this middleware  to wait for responsing and then moving to next middleware.
        });                