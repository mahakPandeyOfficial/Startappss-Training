1Ô∏è‚É£ npm init ‚Äì Start a New Node Project
When you run:
```
npm init

```
      It creates a package.json file ‚Äî which is like the heart of your Node.js project. It stores important info like:

               - Project name

               - Version

               - Entry file (e.g., index.js)

               - Dependencies (packages you install)

               - Scripts (commands you run)

          **  To skip all questions and generate default config:  npm init -y  ** 


2Ô∏è‚É£ npm scripts ‚Äì Shortcuts to Run Commands
            In your package.json, there's a "scripts" section like this:

            ```
            "scripts": {
            "start": "node app.js",
            "dev": "nodemon app.js",
            "test": "echo \"No tests yet!\""
            }
            ```
            You can run them like:

            ```
            npm run dev
            npm start   # (shortcut for the "start" script)

            ```


                ‚ú® Benefit: You don‚Äôt have to remember long terminal commands.

3Ô∏è‚É£ npm packages ‚Äì Reusable Code You Install

        Types of packages:
        ‚úÖ Built-in: Already in Node.js (like fs, http)

        üåê Third-party: You install them using npm install

        Example:
        
        ```
        npm install axios
        
        ```
        *** This adds axios to your dependencies, and you can use it in your code:   const axios = require('axios'); ***

        To install any packages follow this Command:  npm install <package-name>

        1. -save : Add the package to the projects dependencies in package.json.
        2. -save-dev : Add the package to the Project's devDependenncies (used only in developement) in package.json.
        3. -g : Install the package globally, making it available in your whole system not just a project.
        4. -savee-exact : Install tthe exact version specified without updating for newwer version.
        5. -force : Forces npm to fetch and install package even if they already installed.


       
4Ô∏è‚É£ nodemon ‚Äì Auto Restart Server When You Save Code
                If you're building a backend app, instead of manually running:

                ```
                node app.js
                ```

                ...every time you change code ‚Äî use nodemon:

                ```
                npm install nodemon --save-dev
                ```

                Then in your package.json:

                ```
                "scripts": {
                "dev": "nodemon app.js"
                }
                ```

                Now just run:

                ```
                npm run dev
                ```