### REACT QUERY = TanStack Query (Nowadays called as.)

React Query, ‡§ú‡§ø‡§∏‡•á ‡§Ö‡§¨ TanStack Query ‡§ï‡§π‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§è‡§ï ‡§∂‡§ï‡•ç‡§§‡§ø‡§∂‡§æ‡§≤‡•Ä ‡§≤‡§æ‡§á‡§¨‡•ç‡§∞‡•á‡§∞‡•Ä ‡§π‡•à ‡§ú‡•ã React ‡§ê‡§™‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§°‡•á‡§ü‡§æ ‡§´‡§º‡•á‡§ö‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∏‡•ç‡§ü‡•á‡§ü ‡§Æ‡•à‡§®‡•á‡§ú‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§Ü‡§∏‡§æ‡§® ‡§¨‡§®‡§æ‡§§‡•Ä ‡§π‡•à‡•§

React Query ek open-source JavaScript library hai jo React applications mein asynchronous data fetching aur server state management ko simplify karti hai. Ye REST APIs, GraphQL, ya kisi bhi promise-based data source ke saath kaam kar sakti hai.
TanStack Query is an open-source JavaScript library created by TanStack that simplifies data fetching and state management in React applications. It offers a range of features designed to make your life as a developer easier, such as data caching, real-time updates, and optimistic updates.

** üß† Key Features:
  - Automatic Caching: Fetched data ko cache karta hai taaki repeat requests fast ho.

  - Background Updates: Data ko background mein refetch karta hai taaki UI hamesha fresh data dikhaye.

  - Pagination & Infinite Scroll: Built-in support for paginated ya infinite-loading data.

  - Error Handling: Loading aur error states ko automatically handle karta hai.

  - DevTools: Dedicated DevTools extension ke saath aata hai taaki queries aur mutations ko inspect kar sakein. (tanstack.com)


** üöÄ TanStack Query v5: Latest Updates
TanStack Query ka latest version v5 hai, jisme kai naye features aur improvements aaye hain:

Single Signature API: useQuery aur similar hooks ab sirf ek object parameter accept karte hain, jo TypeScript support ko simplify karta hai.

Improved Offline Support: Naya networkMode introduce kiya gaya hai taaki offline scenarios mein better handling ho.

Tracked Queries by Default: Ab queries by default tracked hoti hain, jo render performance ko improve karta hai.

Mutation Cache Garbage Collection: Mutations ab automatically garbage collected ho sakti hain, jaise queries hoti hain


### QUERIES: 
üìå Query Kya Hoti Hai?
React Query mein "query" ka matlab hota hai ‚Äì kisi async (asynchronous) data source se data fetch karna, jaise API call.

Agar aapko server se data GET ya POST method se fetch karna hai, toh query use karte hain. Agar aapko server pe data change ya update karna hai, toh phir mutation use karte hain.

‚öôÔ∏è Kaise Banaye Query?
React Query ka useQuery hook use karke hum component ke andar API se data fetch kar sakte hain.

Aapko useQuery mein do basic cheezein deni hoti hain:

queryKey ‚Äì ek unique naam (jaise 'todos') jo React Query ko batata hai ki kaunsa data fetch ho raha hai.

queryFn ‚Äì ek function jo promise return karta hai (jaise fetchTodoList()).

```
import { useQuery } from '@tanstack/react-query'

function App() {
  const info = useQuery({
    queryKey: ['todos'],
    queryFn: fetchTodoList
  })
}
```
üìå queryKey se caching, refetching aur query ko share karna possible hota hai.
React Query (TanStack Query) backend se data fetch karke usse cache (store) karta hai. Ye caching Query Key ke base par hoti hai.

Socho Query Key ek unique name/tag hai, jisse React Query samajh sake ki konsa data kis key ke saath link hai.

üì¶ Query Result Mein Kya-Kya Hota Hai?
```
const result = useQuery({
  queryKey: ['todos'],
  queryFn: fetchTodoList
})
```
Is result object mein kuch important states milti hain:

 - isPending: Data abhi load ho raha hai

 - isError: Data fetch karte waqt error aayi

 - isSuccess: Data successfully aa gaya

 - data: Agar success hai, to yeh aapka actual data hota hai

 - error: Agar error hai, to error ka message yahan milta hai

 - isFetching: Agar background mein refetch ho raha ho, to yeh true hota hai

‚öôÔ∏è Fetch Status Kya Hota Hai?
React Query ek extra property deta hai ‚Äì fetchStatus:

 - fetching: Abhi data fetch ho raha hai

 - paused: Fetch hone wala tha, par abhi pause hai (e.g. no internet)

 - idle: Filhal kuch nahi ho raha

üîç Difference Samjho:

 - status = batata hai data available hai ya nahi

 - fetchStatus = batata hai query run ho rahi hai ya nahi

### üß† What is QueryClientProvider in React Query?
üîç Short Answer:
QueryClientProvider ek React component hai jo React Query ko pura app mein use karne ka permission deta hai.

Ye ek kind of "context provider" hai jo batata hai:
‚ÄúYe raha mera query client, ab isko sab components use kar sakte hain!‚Äù

üß± React Query ka Setup:
React Query ko use karne se pehle, aapko ek Query Client banana padta hai. Fir aap us client ko QueryClientProvider ke through poore app mein available karwate ho.

üîß Basic Setup Example:
```
import React from 'react'
import ReactDOM from 'react-dom'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import App from './App'

// Step 1: Create Query Client
const queryClient = new QueryClient()

// Step 2: Wrap your App with QueryClientProvider
ReactDOM.createRoot(document.getElementById('root')).render(
  <QueryClientProvider client={queryClient}>
    <App />
  </QueryClientProvider>
)

```

‚úÖ Why is QueryClientProvider Important?
Ye React Query ke sare features ko enable karta hai jaise: caching, refetching, mutations, etc.

Agar aap QueryClientProvider ko na lagao, to useQuery ya useMutation jaise hooks kaam nahi karenge.

### QueryClient: It is the core of the react-query libarary. It manages the caching, background fetching, data synchronization, and other query-related logic. It provides a centralized store for managing and caching asynchronous data in your applications.

### Diffrence Btw Axios and TanStack Query



### gcTime = Garbage Collection Time 

In react query v5, the cacheTime option is in react Query has been renamed to gcTime.
gcTime stands for Garbage Collection Time ‚Äî it's a setting in TanStack Query (React Query) that determines how long unused query data stays in memory after it becomes unused.
"After a query becomes unused (no component is using it), React Query will wait gcTime milliseconds before removing it from cache."
- By Default, inactive queries are garbages collected after 5 mins, this means that if query is not being used for 5 min , the cache for that query will be cleaned up.

You can change the default value of gcTime also as in useQuery hook.


### StaleTime

In react query, staleTime is a configration option that determineshow long fetched data is considered fresh before it needs to be refatched.

Here's how it works:
Freash Data: When data is initially fetched or updated,its considered fresh.

Stale Data: After the staleTime duration(specified in milliseconds) elapses, the data is considered.

Default Value: the default staleTime is 0, it means it immediatly Stale after being fresh.

### Polling 

In React Query , Polling refers to the technique of fetching data from an API at regular interval of time to keep the UI up to date with the latest information. This is very useful for scene where data keeps changing fgrequently and you want to display real time in Ui without  requering the user to manualy refresh the page.

üîÅ What is Polling in React Query?
Polling means automatically refetching data from the server at regular time intervals ‚Äî like refreshing your app‚Äôs data every few seconds.

üì¶ Why Use Polling?
To keep data fresh in real-time apps, such as:

üì¨ Chat apps

üìà Dashboards or stock prices

üîÑ Live notifications

‚úÖ How to Use Polling in React Query
You can use the refetchInterval option in useQuery() to set how often (in milliseconds) data should be refetched.

üîß Example:

```
const { data, isLoading } = useQuery({
  queryKey: ['notifications'],
  queryFn: fetchNotifications,
  refetchInterval: 5000  // ‚è± Refetch every 5 seconds
});
```
So here, React Query will automatically call fetchNotifications() every 5 seconds.

üß† Things to Note:
Option	                        Purpose
refetchInterval	                Sets the time interval to poll
enabled: false	                Turn off polling completely
refetchIntervalInBackground	    Keep polling even if app tab is inactive

üí° Conditional Polling Example:
Only poll if user is logged in:

```
useQuery({
  queryKey: ['userData'],
  queryFn: fetchUserData,
  refetchInterval: isLoggedIn ? 3000 : false
});
```
 Real Life Analogy:
Imagine you're refreshing a WhatsApp chat every few seconds to see new messages ‚Äî that's polling!

### useMutation Hook: 

the useMutation hook is part of React Query amd is used for operations that modify data, like CREATE, UPDATE, and DELETE( Crud operations).
"Mutation" ka matlab hota hai data ko change karna ‚Äî jaise kisi nayi cheez ko add karna, update karna, ya delete karna. Ye cheezein server pe hoti hain ‚Äî jaise database me record update karna.

Syntax: 
```
const mutation = useMutation(mutationFn, {
  //Optional configration options
});
```

we can provide various configuration options to customize the behaviour of the mutation.
for example: 
  - onSuccess: A callback function that runs when the mutationsis successful.
  - onError: A callback function that runs if the mutation fails.
  - onSettled: A callback function that runs regardless of success or failure.
  - mutationKey: A unique key too identify the mutations in the cache.
  - retry: The number of times to retry the mutation if it fails.

*-*-*-*-*-*-
.mutate() is a function in the react query which is used to excute the mutation in react query. 
.mutate() ek function hai jo aap useMutation() se milta hai. Iska kaam hota hai:
.mutate(data) ko call karo jab aap actual mein server pe data bhejna chahte ho.

Mutation ko manually trigger karna ‚Äî yaani jab aapko data bhejna ho (POST, PUT, DELETE).


