1. Three Core Concepts of Redux : 

 # STORE

   -the store holds the state of your Application
 
 # ACTION 
   
  -an action that decribes the changes in the state of the Application

 # REDUCER

  -A Reducer which carries out the state transition depending on the action.

2. Three Principles of Redux :

  # First Principle = "The State of your whole Application is stored in an object tree within a single store".
     // Lets assume we are tracking the no. of cakes on the shelf
     {
        numberOfCakes: 10
     } 

   # Second Principle = "The only way to change the state is to emit an action, an object dsecribing what happened"  
     // Let the ShopKeeper know about your action of BUY_CAKE
     {
        type: 'BUY_CAKE',
     }

   # Third Principle = "To specify how the state tree is transformed by actions, you write pure reducers"

     - Reducer - (previousState, action) => newState

     //Reducer is the ShopKeeper
     const reducer = (state, action) => {
        switch(action.type) {
            case 'BUY_CAKE': return {
                numberOfCakes: state.numberOfCakes - 1;
            }

        }
     } 

3. ACTIONS :  An action is a plain JavaScript object that has a type field. You can think of an action as an event that describes something that happened in the application.
  
  - The Only way that your application can interact with the store is Action.
  - Actions are payloads that send data from your application to the store.
  - Actions are plain JavaScript objects. They don't mutate the state. They simply describe changes to
  - Carry Some information from your app to the redux store.

  An action creator is a function that creates and returns an action object.

4. REDUCERS :   A reducer is a function that receives the "current state" and an "action object", decides how to update the state if necessary, and returns the new state: (state, action) => newState. You can think of a reducer as an event listener which handles events based on the received action (event) type.

  - It Specify How the state changes in response to an Actions sent to the store.
  - Reducers are pure functions that take the current state and an action as arguments, and return the next state of the application.

  Reducers must always follow some specific rules:

 --They should only calculate the new state value based on the state and action arguments
 --They are not allowed to modify the existing state. Instead, they must make immutable updates, by copying the existing state and       making changes to the copied values.
 --They must be "pure" - they cannot do any asynchronous logic, calculate random values, or cause other "side effects"


5. STORE :

  - One Store for the entire application
   * Key Responsiblity :
   - Holds Application state    //Step 1
   - Allows access to state via getState()   //Step 2
   - Allow state to be updated via dispatch(action)   //Step 3
   - Register listners via subscribe(listner)   //Step 4
   - Handle unregistering of listners via the function returned by subscribe(listner)   //Step 5
   - Store is the central place of your application where all the data is stored.

   ** NOTE : When you call store.dispatch(action), it sends the action to reducers, updates the state, then calls all subscribed listeners.


### 🔧 How Redux Manages Global State in Large Applications
Redux is designed to centralize and manage state in a predictable and scalable way. In large applications with many components and data flows, Redux helps keep the logic clean and maintainable.

### MIDDLEWARE

  - Is the suggested way to extend redux with custom functionality
  - Provides a third-party extension point between disptaching an action, and the moment it reaches the reducer
  - Use middleware for logging, crash reporting, performing asynchronous tasks etc

Middleware = Action aur Reducer ke beech ka filter

Side effects handle karta hai (like API, logs)

Redux ko aur powerful aur flexible banata hai



🧪 Popular Middleware
Naam	             Kya karta hai

redux-thunk	    -   Asynchronous kaam (jaise API call) handle karta hai
redux-logger	  -   Console me actions aur state dikhaata hai
redux-saga	    -   Advanced async kaam generator functions ke saath


### Async Actions : asynchronous API calls to fetch data from an end points and use that data in your application.     (By default Redux synchronous hota hai , isiliye Middleware jaise redux-thunk ka  use karte hai)

 ???? State object : 
syntax -----> 
      state = {
        loading : true,
        data: [],
        error: ''
      }
 loading = Display a loading spinner in your components
 data = List of users
 error = Display error message to users

 ???? Actions :
    1. FETCH_USER_REQUEST = fetches list of users
    2. FETCH_USER_SUCCESS = fetched successfully 
    3. FETCH_USER_FAILURE = error in fetching the data 

 ???? Reducers :
   case : FETCH_USER_REQUEST
     loading : true
   case : FETCH_USER_SUCCESS
     loading : false
     user : data (from API)
   case : FETCH_USER_FAILURE
     loading : false
     error: error (from API)     



### AXIOS

Axios ek JavaScript library hai jo humein HTTP requests (jaise GET, POST, PUT, DELETE) karne mein help karti hai — mainly API se data lene ya bhejne ke liye.

Socho Axios ek postman jaisa tool hai jo tumhare React/Redux app se server ko baat karne deta hai.
Axios ek easy-to-use tool hai jo tumhare frontend ko backend APIs se connect karta hai — aur fetch se zyada powerful hai.

### Redux-Thunk :
Thunk ka flow ====> 
          React Component
              ↓
          dispatch(thunkFunction)
              ↓
          middleware (redux-thunk)
              ↓
          Runs async code
              ↓
          dispatch({ type: 'SUCCESS', payload: data })

### Connect() : connect() is a function that connects your React component to the Redux store.

   It lets your component:

      -- Read data from the store (using mapStateToProps)

      -- Send actions to the store (using mapDispatchToProps)

## Redux Hooks used in React 
  
  1. useSelector() : useSelector() is a React-Redux hook that lets your component read data from the Redux store. It is work as a mapStateToProps which is used previously in connect().

               -> Think of it like asking Redux: “Hey, what’s the current value of this state?”
               -> Works only in function components, Replaces mapStateToProps and connect() in modern apps
        SYNTAX => 
              import { useSelector } from 'react-redux' 
              const cart = useSelector(state => state.cart)      

  2. useDispatch() : useDispatch() is a React-Redux hook used to send actions to the Redux store.

              -> Think of it like telling Redux: "Hey, I want to update the state!"
              -> No need for connect() or class components, It Read state with useSelector, change it with useDispatch, the dispatch() is synchronous unless you use middleware like redux-thunk
      SYNTAX=> 
              import { useDispatch } from 'react-redux';
              const dispatch = useDispatch();