1. Three Core Concepts of Redux : 

 # STORE

   -the store holds the state of your Application
 
 # ACTION 
   
  -an action that decribes the changes in the state of the Application

 # REDUCER

  -A Reducer which carries out the state transition depending on the action.

2. Three Principles of Redux :

  # First Principle = "The State of your whole Application is stored in an object tree within a single store".
     // Lets assume we are tracking the no. of cakes on the shelf
     {
        numberOfCakes: 10
     } 

   # Second Principle = "The only way to change the state is to emit an action, an object dsecribing what happened"  
     // Let the ShopKeeper know about your action of BUY_CAKE
     {
        type: 'BUY_CAKE',
     }

   # Third Principle = "To specify how the state tree is transformed by actions, you write pure reducers"

     - Reducer - (previousState, action) => newState

     //Reducer is the ShopKeeper
     const reducer = (state, action) => {
        switch(action.type) {
            case 'BUY_CAKE': return {
                numberOfCakes: state.numberOfCakes - 1;
            }

        }
     } 

3. ACTIONS :
  
  - The Only way that your application can interact with the store is Action.
  - Actions are payloads that send data from your application to the store.
  - Actions are plain JavaScript objects. They don't mutate the state. They simply describe changes to
  - Carry Some information from your app to the redux store.

4. REDUCERS :

  - It Specify How the state changes in response to an Actions sent to the store.
  - Reducers are pure functions that take the current state and an action as arguments, and return the next state of the application.


5. STORE :

  - One Store for the entire application
   * Key Responsiblity :
   - Holds Application state    //Step 1
   - Allows access to state via getState()   //Step 2
   - Allow state to be updated via dispatch(action)   //Step 3
   - Register listners via subscribe(listner)   //Step 4
   - Handle unregistering of listners via the function returned by subscribe(listner)   //Step 5
   - Store is the central place of your application where all the data is stored.

   ** NOTE : When you call store.dispatch(action), it sends the action to reducers, updates the state, then calls all subscribed listeners.


### ðŸ”§ How Redux Manages Global State in Large Applications
Redux is designed to centralize and manage state in a predictable and scalable way. In large applications with many components and data flows, Redux helps keep the logic clean and maintainable.

### MIDDLEWARE

  - Is the suggested way to extend redux with custom functionality
  - Provides a third-party extension point between disptaching an action, and the moment it reaches the reducer
  - Use middleware for logging, crash reporting, performing asynchronous tasks etc

Middleware = Action aur Reducer ke beech ka filter

Side effects handle karta hai (like API, logs)

Redux ko aur powerful aur flexible banata hai



ðŸ§ª Popular Middleware
Naam	             Kya karta hai

redux-thunk	    -   Asynchronous kaam (jaise API call) handle karta hai
redux-logger	  -   Console me actions aur state dikhaata hai
redux-saga	    -   Advanced async kaam generator functions ke saath


### Async Actions : asynchronous API calls to fetch data from an end points and use that data in your application.

 ???? State object : 
syntax -----> 
      state = {
        loading : true,
        data: [],
        error: ''
      }
 loading = Display a loading spinner in your components
 data = List of users
 error = Display error message to users

 ???? Actions :
    1. FETCH_USER_REQUEST = fetches list of users
    2. FETCH_USER_SUCCESS = fetched successfully 
    3. FETCH_USER_FAILURE = error in fetching the data 

 ???? Reducers :
   case : FETCH_USER_REQUEST
     loading : true
   case : FETCH_USER_SUCCESS
     loading : false
     user : data (from API)
   case : FETCH_USER_FAILURE
     loading : false
     error: error (from API)     
